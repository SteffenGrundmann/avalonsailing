How It Works.

all programs can be run manually with -d to prevent them from going daemon and make them log tostdout.

the epos controllers are connected to ttyUSB{3,4,5}. the protocol is turned into something readable by 1 eposcom per tty.
you don't need to start those by hand, they're managed by eposd:

   /usr/bin/eposd /dev/ttyXXX ....

will fire up an eposcom per tty and create a server socket /var/run/eposd.

you can connect to it with
   plug /var/run/eposd

adn send a command like
  0x1227:0x6004[0]

to read register 6004 (abs pos) from device 01227 (the bmmh)

All other programs (imucat, windcat, rudderd, helmsman ...) are connected over the 'linebus'
provided by 

   linebusd /var/run/lbus

you can see what happens and send messages yourself on the bus with 

    plug /var/run/lbus

windcat and imucat are read only connected to it with

    imucat /dev/windsensor | plug -i /var/run/lbus
    windcat /dev/xsensIMU | plug -i /var/run/lbus

the rudderd is a client of both the eposd and the linebus and started with

   plug /var/run/lbus rudderd /var/run/eposd

plug will fork off rudderd with stdin and stdout connected to /var/run/lbus.  

commands to it must be in the format (all fields required, order mandatory!)

rudderctl: timestamp_ms:0 rudder_l_deg:0 rudder_r_deg:0 sail_deg:0

rudderd will home when neccesary and print a status update at least 1/second.

wind and imu can be debugged with the -d flag:

   windcat -d /dev/windsensor
   imucat -d /dev/xsensIMU

optional argument -b baudrate  (windcat: -b 4800,  imucat: -b 115200)

note that only 1 program should have /dev/windsensor and /dev/xsensIMU open or half the bytes go to the other program. 

the helmsman connects to the linebus, listens for imu wind and ruddersts, as well as for helmsmanctl and sends rudderctl messages.

there is a fake version of windcat, imucat and rudderd in ../fakeio that will crudely model the physics of the boat given a constant wind.

