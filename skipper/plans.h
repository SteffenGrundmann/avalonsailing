// Copyright 2011 The Avalon Project Authors. All rights reserved.
// Use of this source code is governed by the Apache License 2.0
// that can be found in the LICENSE file.
// Steffen Grundmann, July 2011
#ifndef SKIPPER_PLANS_H
#define SKIPPER_PLANS_H

#include "skipper/target_circle_cascade.h"

/* input for plan generation:
% The Caribbean Plan
points = [ ...
16.877  -61.7721 0.09  % 15 km south of Antiguas coast is the final target point
16.877  -61.2887 0.1
17   -60   0.5
18   -58   1
23.5 -25   3        % Northern Wendekreis
33   -20   2        % west of Madeira
43   -15   1
45   -13   1        % NW of La Coruna
48.2 -5    0.25 ];  % W of Brest
*/

typedef const TargetCirclePoint TCP;

const TargetCirclePoint caribbean_plan[] = {
TCP( 16.877, -61.7721,     0.09),
TCP( 16.877, -61.7144,  0.09125),
TCP( 16.877,  -61.656,   0.0925),
TCP( 16.877, -61.5967,  0.09375),
TCP( 16.877, -61.5367,    0.095),
TCP( 16.877, -61.4759,  0.09625),
TCP( 16.877, -61.4143,   0.0975),
TCP( 16.877, -61.3519,  0.09875),
TCP( 16.877, -61.2887,      0.1),
TCP(16.8854, -61.2007, 0.157143),
TCP(16.8969, -61.0806, 0.214286),
TCP(16.9114, -60.9285, 0.271429),
TCP( 16.929, -60.7444, 0.328571),
TCP(16.9496, -60.5283, 0.385714),
TCP(16.9733, -60.2802, 0.442857),
TCP(     17,      -60,      0.5),
TCP(  17.15,    -59.7,      0.6),
TCP( 17.325,   -59.35,      0.7),
TCP( 17.525,   -58.95,      0.8),
TCP(  17.75,    -58.5,      0.9),
TCP(     18,      -58,        1),
TCP(18.1272, -57.2368,  1.08696),
TCP(18.2646, -56.4126,  1.17391),
TCP(18.4121, -55.5273,  1.26087),
TCP(18.5698, -54.5809,  1.34783),
TCP(18.7377, -53.5735,  1.43478),
TCP(18.9158, -52.5051,  1.52174),
TCP(19.1041, -51.3756,   1.6087),
TCP(19.3025,  -50.185,  1.69565),
TCP(19.5111, -48.9334,  1.78261),
TCP(19.7299, -47.6207,  1.86957),
TCP(19.9588,  -46.247,  1.95652),
TCP( 20.198, -44.8122,  2.04348),
TCP(20.4473, -43.3164,  2.13043),
TCP(20.7068, -41.7595,  2.21739),
TCP(20.9764, -40.1415,  2.30435),
TCP(21.2562, -38.4625,   2.3913),
TCP(21.5463, -36.7225,  2.47826),
TCP(21.8464, -34.9214,  2.56522),
TCP(22.1568, -33.0592,  2.65217),
TCP(22.4773,  -31.136,  2.73913),
TCP( 22.808, -29.1517,  2.82609),
TCP(23.1489, -27.1064,  2.91304),
TCP(   23.5,      -25,        3),
TCP(25.0966, -24.1597,  2.85714),
TCP(26.6134, -23.3613,  2.71429),
TCP(28.0504,  -22.605,  2.57143),
TCP(29.4076, -21.8908,  2.42857),
TCP(30.6849, -21.2185,  2.28571),
TCP(31.8824, -20.5882,  2.14286),
TCP(     33,      -20,        2),
TCP(34.1932, -19.4034,  1.90909),
TCP(35.3295, -18.8352,  1.81818),
TCP(36.4091, -18.2955,  1.72727),
TCP(37.4318, -17.7841,  1.63636),
TCP(38.3977, -17.3011,  1.54545),
TCP(39.3068, -16.8466,  1.45455),
TCP(40.1591, -16.4205,  1.36364),
TCP(40.9545, -16.0227,  1.27273),
TCP(41.6932, -15.6534,  1.18182),
TCP( 42.375, -15.3125,  1.09091),
TCP(     43,      -15,        1),
TCP(   43.4,    -14.6,        1),
TCP(   43.8,    -14.2,        1),
TCP(   44.2,    -13.8,        1),
TCP(   44.6,    -13.4,        1),
TCP(     45,      -13,        1),
TCP(45.2673, -12.3318, 0.960526),
TCP(45.5236, -11.6911, 0.921053),
TCP(45.7689, -11.0778, 0.881579),
TCP(46.0032,  -10.492, 0.842105),
TCP(46.2265, -9.93364, 0.802632),
TCP(46.4389, -9.40275, 0.763158),
TCP(46.6403, -8.89931, 0.723684),
TCP(46.8307, -8.42334, 0.684211),
TCP(47.0101, -7.97483, 0.644737),
TCP(47.1785, -7.55378, 0.605263),
TCP(47.3359, -7.16018, 0.565789),
TCP(47.4824, -6.79405, 0.526316),
TCP(47.6178, -6.45538, 0.486842),
TCP(47.7423, -6.14416, 0.447368),
TCP(47.8558, -5.86041, 0.407895),
TCP(47.9584, -5.60412, 0.368421),
TCP(48.0499, -5.37529, 0.328947),
TCP(48.1304, -5.17391, 0.289474),
TCP(   48.2,       -5,     0.25),
TCP(0, 0, 0)                      // end marker
};
const TargetCircle caribbean_final(caribbean_plan[0].lat_lon, 0.09);


// Lake Zuerich plans, r = 550m for the plan, r=2000m to find the correct location initially
// kilchberg thalwil horgen au waedenswil wollerau

const TargetCirclePoint sukku_plan[] = {
TCP(47.3477, 8.5431, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle sukku(sukku_plan[0].lat_lon, 0.02);

const TargetCirclePoint kilchberg_plan[] = {
TCP(47.3250, 8.5623, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle kilchberg(kilchberg_plan[0].lat_lon, 0.02);

const TargetCirclePoint thalwil_plan[] = {
TCP(47.2962, 8.5812, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle thalwil(thalwil_plan[0].lat_lon, 0.02);

const TargetCirclePoint horgen_plan[] = {
TCP(47.2699, 8.6052, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle horgen(horgen_plan[0].lat_lon, 0.02);

const TargetCirclePoint au_plan[] = {
TCP(47.2584, 8.6468, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle au(au_plan[0].lat_lon, 0.02);

const TargetCirclePoint waedenswil_plan[] = {
TCP(47.2379, 8.6862, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle waedenswil(waedenswil_plan[0].lat_lon, 0.02);

const TargetCirclePoint wollerau_plan[] = {
TCP(47.2207, 8.7220, 0.005),
TCP(0, 0, 0)}; // end marker
const TargetCircle wollerau(wollerau_plan[0].lat_lon, 0.02);

const TargetCirclePoint ufenau_plan[] = {
    TCP( 47.2223,   8.7194,   0.0018),
    TCP( 47.2229,  8.71825,   0.0018),
    TCP( 47.2235,  8.71709,   0.0018),
    TCP( 47.2242,  8.71594,   0.0018),
    TCP( 47.2248,  8.71478,   0.0018),
    TCP( 47.2254,  8.71363,   0.0018),
    TCP(  47.226,  8.71248,   0.0018),
    TCP( 47.2266,  8.71132,   0.0018),
    TCP( 47.2273,  8.71017,   0.0018),
    TCP( 47.2279,  8.70901,   0.0018),
    TCP( 47.2285,  8.70786,   0.0018),
    TCP( 47.2291,   8.7067,   0.0018),
    TCP( 47.2297,  8.70555,   0.0018),
    TCP( 47.2304,   8.7044,   0.0018),
    TCP(  47.231,  8.70324,   0.0018),
    TCP( 47.2316,  8.70209,   0.0018),
    TCP( 47.2322,  8.70093,   0.0018),
    TCP( 47.2329,  8.69978,   0.0018),
    TCP( 47.2335,  8.69863,   0.0018),
    TCP( 47.2341,  8.69747,   0.0018),
    TCP( 47.2347,  8.69632,   0.0018),
    TCP( 47.2353,  8.69516,   0.0018),
    TCP(  47.236,  8.69401,   0.0018),
    TCP( 47.2366,  8.69285,   0.0018),
    TCP( 47.2372,   8.6917,   0.0018),
    TCP( 47.2378,  8.69053,   0.0018),
    TCP( 47.2384,  8.68936,   0.0018),
    TCP( 47.2389,  8.68819,   0.0018),
    TCP( 47.2395,  8.68702,   0.0018),
    TCP( 47.2401,  8.68585,   0.0018),
    TCP( 47.2407,  8.68468,   0.0018),
    TCP( 47.2413,  8.68351,   0.0018),
    TCP( 47.2418,  8.68234,   0.0018),
    TCP( 47.2424,  8.68116,   0.0018),
    TCP(  47.243,  8.67999,   0.0018),
    TCP( 47.2436,  8.67882,   0.0018),
    TCP( 47.2442,  8.67765,   0.0018),
    TCP( 47.2447,  8.67648,   0.0018),
    TCP( 47.2453,  8.67531,   0.0018),
    TCP( 47.2459,  8.67414,   0.0018),
    TCP( 47.2465,  8.67297,   0.0018),
    TCP( 47.2471,   8.6718,   0.0018),
    TCP( 47.2476,  8.67063,   0.0018),
    TCP( 47.2482,  8.66946,   0.0018),
    TCP( 47.2488,  8.66829,   0.0018),
    TCP( 47.2494,  8.66712,   0.0018),
    TCP( 47.2499,  8.66595,   0.0018),
    TCP( 47.2505,  8.66478,   0.0018),
    TCP( 47.2511,  8.66361,   0.0018),
    TCP( 47.2517,  8.66244,   0.0018),
    TCP( 47.2523,  8.66126,   0.0018),
    TCP( 47.2528,  8.66009,   0.0018),
    TCP( 47.2534,  8.65892,   0.0018),
    TCP(  47.254,  8.65775,   0.0018),
    TCP( 47.2546,  8.65658,   0.0018),
    TCP( 47.2552,  8.65541,   0.0018),
    TCP( 47.2557,  8.65424,   0.0018),
    TCP( 47.2563,  8.65307,   0.0018),
    TCP( 47.2569,   8.6519,   0.0018),
    TCP(  47.257,  8.65062,   0.0018),
    TCP( 47.2572,  8.64934,   0.0018),
    TCP( 47.2574,  8.64806,   0.0018),
    TCP( 47.2575,  8.64678,   0.0018),
    TCP( 47.2576,   8.6455,   0.0018),
    TCP( 47.2578,  8.64423,   0.0018),
    TCP(  47.258,  8.64295,   0.0018),
    TCP( 47.2581,  8.64167,   0.0018),
    TCP( 47.2583,  8.64039,   0.0018),
    TCP( 47.2584,  8.63911,   0.0018),
    TCP( 47.2585,  8.63783,   0.0018),
    TCP( 47.2587,  8.63655,   0.0018),
    TCP( 47.2589,  8.63527,   0.0018),
    TCP(  47.259,  8.63399,   0.0018),
    TCP( 47.2591,  8.63271,   0.0018),
    TCP( 47.2593,  8.63143,   0.0018),
    TCP( 47.2595,  8.63015,   0.0018),
    TCP( 47.2596,  8.62887,   0.0018),
    TCP( 47.2598,   8.6276,   0.0018),
    TCP( 47.2599,  8.62632,   0.0018),
    TCP(   47.26,  8.62504,   0.0018),
    TCP( 47.2602,  8.62376,   0.0018),
    TCP( 47.2604,  8.62248,   0.0018),
    TCP( 47.2605,   8.6212,   0.0018),
    TCP( 47.2615,  8.62073,   0.0018),
    TCP( 47.2625,  8.62026,   0.0018),
    TCP( 47.2635,  8.61979,   0.0018),
    TCP( 47.2646,  8.61931,   0.0018),
    TCP( 47.2656,  8.61884,   0.0018),
    TCP( 47.2666,  8.61837,   0.0018),
    TCP( 47.2676,   8.6179,   0.0018),
    TCP( 47.2679,  8.61668,   0.0018),
    TCP( 47.2682,  8.61547,   0.0018),
    TCP( 47.2686,  8.61425,   0.0018),
    TCP( 47.2689,  8.61304,   0.0018),
    TCP( 47.2692,  8.61182,   0.0018),
    TCP( 47.2695,  8.61061,   0.0018),
    TCP( 47.2699,  8.60939,   0.0018),
    TCP( 47.2702,  8.60818,   0.0018),
    TCP( 47.2705,  8.60696,   0.0018),
    TCP( 47.2708,  8.60575,   0.0018),
    TCP( 47.2712,  8.60453,   0.0018),
    TCP( 47.2715,  8.60332,   0.0018),
    TCP( 47.2718,   8.6021,   0.0018),
    TCP( 47.2728,  8.60122,   0.0018),
    TCP( 47.2738,  8.60034,   0.0018),
    TCP( 47.2749,  8.59947,   0.0018),
    TCP( 47.2759,  8.59859,   0.0018),
    TCP( 47.2769,  8.59771,   0.0018),
    TCP( 47.2779,  8.59683,   0.0018),
    TCP( 47.2789,  8.59596,   0.0018),
    TCP(   47.28,  8.59508,   0.0018),
    TCP(  47.281,   8.5942,   0.0018),
    TCP(  47.282,  8.59332,   0.0018),
    TCP(  47.283,  8.59244,   0.0018),
    TCP(  47.284,  8.59157,   0.0018),
    TCP( 47.2851,  8.59069,   0.0018),
    TCP( 47.2861,  8.58981,   0.0018),
    TCP( 47.2871,  8.58893,   0.0018),
    TCP( 47.2881,  8.58806,   0.0018),
    TCP( 47.2891,  8.58718,   0.0018),
    TCP( 47.2902,   8.5863,   0.0018),
    TCP( 47.2912,  8.58542,   0.0018),
    TCP( 47.2922,  8.58454,   0.0018),
    TCP( 47.2932,  8.58367,   0.0018),
    TCP( 47.2942,  8.58279,   0.0018),
    TCP( 47.2952,  8.58191,   0.0018),
    TCP( 47.2963,  8.58103,   0.0018),
    TCP( 47.2973,  8.58016,   0.0018),
    TCP( 47.2983,  8.57928,   0.0018),
    TCP( 47.2993,   8.5784,   0.0018),
    TCP( 47.3003,  8.57752,   0.0018),
    TCP( 47.3014,  8.57664,   0.0018),
    TCP( 47.3024,  8.57577,   0.0018),
    TCP( 47.3034,  8.57489,   0.0018),
    TCP( 47.3044,  8.57401,   0.0018),
    TCP( 47.3054,  8.57313,   0.0018),
    TCP( 47.3065,  8.57226,   0.0018),
    TCP( 47.3075,  8.57138,   0.0018),
    TCP( 47.3085,   8.5705,   0.0018),
    TCP( 47.3097,  8.56984,   0.0018),
    TCP( 47.3108,  8.56919,   0.0018),
    TCP(  47.312,  8.56853,   0.0018),
    TCP( 47.3131,  8.56788,   0.0018),
    TCP( 47.3143,  8.56722,   0.0018),
    TCP( 47.3154,  8.56656,   0.0018),
    TCP( 47.3166,  8.56591,   0.0018),
    TCP( 47.3177,  8.56525,   0.0018),
    TCP( 47.3189,   8.5646,   0.0018),
    TCP( 47.3201,  8.56394,   0.0018),
    TCP( 47.3212,  8.56328,   0.0018),
    TCP( 47.3224,  8.56263,   0.0018),
    TCP( 47.3235,  8.56197,   0.0018),
    TCP( 47.3247,  8.56132,   0.0018),
    TCP( 47.3258,  8.56066,   0.0018),
    TCP(  47.327,     8.56,   0.0018),
    TCP( 47.3282,  8.55935,   0.0018),
    TCP( 47.3293,  8.55869,   0.0018),
    TCP( 47.3305,  8.55804,   0.0018),
    TCP( 47.3316,  8.55738,   0.0018),
    TCP( 47.3328,  8.55672,   0.0018),
    TCP( 47.3339,  8.55607,   0.0018),
    TCP( 47.3351,  8.55541,   0.0018),
    TCP( 47.3362,  8.55476,   0.0018),
    TCP( 47.3374,   8.5541,   0.0018),
    TCP( 47.3384,  8.55406,   0.0018),
    TCP( 47.3394,  8.55402,   0.0018),
    TCP( 47.3403,  8.55398,   0.0018),
    TCP( 47.3413,  8.55394,   0.0018),
    TCP( 47.3423,   8.5539,   0.0018),
    TCP( 47.3424,  8.55285,   0.0018),
    TCP( 47.3426,   8.5518,   0.0018),
    TCP( 47.3427,  8.55075,   0.0018),
    TCP( 47.3428,   8.5497,   0.0018),
    TCP( 47.3429,  8.54865,   0.0018),
    TCP(  47.343,   8.5476,   0.0018),
    TCP( 47.3432,  8.54655,   0.0018),
    TCP( 47.3433,   8.5455,   0.0018),
    TCP( 47.3443,  8.54508,   0.0018),
    TCP( 47.3453,  8.54466,   0.0018),
    TCP( 47.3462,  8.54424,   0.0018),
    TCP( 47.3472,  8.54382,   0.0018),
    TCP( 47.3482,   8.5434,   0.0018),
TCP(       0,        0,        0) };  // end marker

// Start Ufenau plan if we are less than 5 * 200m from the start point away.
const TargetCircle ufenau(47.3482,   8.5434,  0.0018 * 5 );
const TargetCircle ufenau_target(47.2223,   8.7194,   0.0018);



// for checks of the correct initial GPS data
const TargetCirclePoint brest_check[] = {
TargetCirclePoint( 48.2390, -4.7698, 1.0),
TargetCirclePoint(0, 0, 0)}; // end marker
const TargetCircle brest(brest_check[0].lat_lon, brest_check[0].radius_deg);




#endif  // SKIPPER_PLANS_H
