#! /bin/sh
### BEGIN INIT INFO
# Provides:          ais
# Required-Start:    $remote_fs $syslog imucfg lbus
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start nmeacat (ais) on lbus
# Description:       Start nmeacat (ais) on lbus
### END INIT INFO

# Author: Luuk van Dijk <lvd@google.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="aiscat"
NAME=ais
SCRIPTNAME=/etc/init.d/$NAME

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

err=""
for p in linebusd plug nmeacat ; do
    which $p >/dev/null 2>&1 || err="$err $p"
done
[ "$err" = "" ] || { log_failure_msg "Missing binaries: $err" ; exit 0; }

[ -r /dev/$NAME ] || { log_failure_msg "Missing /dev/$NAME link"; exit 0; }

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
        echo '$stats' | plug -f xxx /var/run/lbus | grep -q $NAME && return 1
	plug -bin $NAME /var/run/lbus -- `which nmeacat` -b 38400 -g 0 /dev/$NAME
        echo '$stats' | plug -f /var/run/lbus | grep -q $NAME && return 0
	return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
        echo '$stats' | plug -f xxx /var/run/lbus | grep -q $NAME || return 1
	echo '$kill' $NAME | plug -i /var/run/lbus
        echo '$stats' | plug -f xxx /var/run/lbus | grep -q $NAME || return 0
	return 2
}

do_status()
{
    echo '$stats' | plug -f xxx /var/run/lbus | grep $NAME || log_warning_msg "$NAME not plugged in."
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	do_status
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
