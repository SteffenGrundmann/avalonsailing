#! /bin/sh
### BEGIN INIT INFO
# Provides:          ebus
# Required-Start:    $remote_fs $syslog imucfg
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start a linebus on /var/run/ebus
# Description:       start a linebus on /var/run/ebus  
### END INIT INFO

# Author: Luuk van Dijk <lvd@gmail.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="linebus (ebus)"
NAME=ebus
DAEMON=/usr/local/bin/linebusd
EBUS="/var/run/$NAME"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

err=""
for p in linebusd plug eposcom rudderctl skewmon sailctl eposprobe eposmon drivests; do
    which $p >/dev/null 2>&1 || err="$err $p"
done
[ "$err" = "" ] || { log_failure_msg "Missing binaries: $err"; exit 0; }

err=""
for p in /dev/rudder_l /dev/rudder_r /dev/sail;  do
    [ -r $p ] || err="$err $p"
done
[ "$err" = "" ] || { log_failure_msg "Missing device links: $err"; exit 0; }

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- $EBUS \
		|| return 2

	for p in /dev/rudder_l /dev/rudder_r /dev/sail;  do
            plug -b $EBUS -- `which eposcom` -T $p
	done

	plug -bp $EBUS -- `which rudderctl` -l -T   # homing and positioning of left rudder
	plug -bp $EBUS -- `which rudderctl` -r -T   # homing and positioning of right rudder
	plug -bp $EBUS -- `which skewmon` -T        # monitor sail motor/bmmh sensor angle skew
	plug -bp $EBUS -- `which sailctl` -T        # positioning for sail

        # periodically (-f Hz) issue status register probe commands (needed by drivests and eposmon)
	plug -bpi $EBUS -- `which eposprobe` -f 2 -T

        # summarize and report epos communication errors to syslog
	plug -bon "eposmon" $EBUS -- `which eposmon` 

	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	echo | plug -p -i $EBUS || return 1
	echo | plug -p -i $EBUS && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
